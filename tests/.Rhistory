##################
###Kohonen maps###
##################
###Parameters for runs
#Size of Grid
g <- round(sqrt(5*sqrt(length(rownames(alleles)))))#common rule of thumb
#Create an output grid of size sqrt(n)
som_grid <- somgrid(xdim = g,
ydim = g,
topo="hexagonal",
neighbourhood.fct = "gaussian")
#Number of Replicates - can increase if you like
n <- 100
#Number of steps - doesn't usually matter beyond ~100
m <- 100
##############
###Run SOMs###
##############
res <- Trait.SOM()
alleles
class(alleles)
class(traits)
class(space)
class(traits)
###SPATIAL, CLIMATIC, AND TRAIT DATA
space <- as.matrix(read.csv("./data/seal_space.csv",header=T,row.names=1))
climate <- as.matrix(read.csv("./data/seal_climate.csv",header=T,row.names=1))
traits <- as.matrix(read.csv("./data/seal_traits.csv",header=T,row.names=1))
###Parameters for runs
#Size of Grid
g <- round(sqrt(5*sqrt(length(rownames(alleles)))))#common rule of thumb
#Create an output grid of size sqrt(n)
som_grid <- somgrid(xdim = g,
ydim = g,
topo="hexagonal",
neighbourhood.fct = "gaussian")
#Number of Replicates - can increase if you like
n <- 100
#Number of steps - doesn't usually matter beyond ~100
m <- 100
##############
###Run SOMs###
##############
res <- Trait.SOM()
#Number of Replicates - can increase if you like
n <- 10
#Number of steps - doesn't usually matter beyond ~100
m <- 100
##############
###Run SOMs###
##############
res <- Trait.SOM()
#Number of Replicates - can increase if you like
n <- 25
#Number of steps - doesn't usually matter beyond ~100
m <- 100
##############
###Run SOMs###
##############
res <- Trait.SOM()
#Plot Learning#
plotLearning.Traits(res)
#Layer Weights#
plotLayers(res)
#Optimize K#
plotK(res)
#Layer Weights#
plotLayers(res)
#Optimize K#
plotK(res)
#Sample Map#
set.seed(1)
labels <- match.labels(a)#get DAPC labels
q_mat <- match.k(res,labels)#get admixture coefficients
par(mfrow=c(1,1),
mar=c(0,0,0,0))
xy <- xyz[,1:2]
#Sample data
dat <- read.csv("./data/seal_data.csv",header=T,row.names=1)
dat
xyz <- dat[,2:4]
par(mfrow=c(1,1),
mar=c(0,0,0,0))
xy <- xyz[,1:2]
maps::map(database = 'county', xlim = range(xy[,1]) + c(-0.5,0.5), ylim = range(xy[,2]) + c(-0.5,0.5), col="white")
map.axes()
maps::map(database = 'county', xlim = range(xy[,1]) + c(-0.5,0.5), ylim = range(xy[,2]) + c(-0.5,0.5), col="gray",add=T)
maps::map(database = 'state', xlim = range(xy[,1]) + c(-0.5,0.5), ylim = range(xy[,2]) + c(-0.5,0.5), add = T)
make.admix.pie.plot(q_mat,xy,layer.colors = k.cols,radii=2.5,add = T)
legend(-88,38,legend=c(expression(italic("D. cheaha")),
expression(italic("D. monticola"))),cex=2,pt.bg=k.cols[2:1],pch=21)
map.scale(-81.2,31.1)
#Structure Plot#
x <- q_mat[order(q_mat[,1]),]
z <- hclust(dist(x),"single")$order
make.structure.plot(admix.proportions = x[z,],
sample.names = rownames(x[z,]),
mar = c(8,4,2,2),
layer.colors = k.cols,
sort.by = 1)
#Example outputs from one model#
plotModel(res)
#################
#Compare to sNMF#
#################
res1 <- DNA.SOM()#Make a DNA SOM for direct comparisons of admixture
q_mat.DNA <- match.k(res1)#get admixture coefficients
match.labels
labels
q_mat.DNA <- match.k(res1,labels)#get admixture coefficients
sNMF_q_mat <- read.csv("./data/seal_q.mat.csv",row.names=1)#Admixture estimates from sNMF
#Compare sNMF and DNA SOM admixture estimates
par(mfrow=c(2,1),mar=c(1,4.5,0.5,2),mgp=c(2,0.5,0))
plot(sNMF_q_mat[,1],q_mat.DNA[,1],pch=21,bg=layer.cols[1],xaxt='n',xlab=NA,
ylab="DNA SOM",xlim=c(0,1),ylim=c(0,1),cex=2)
axis(side = 1, at = c(0,0.2,0.4,0.6,0.8,1), labels = FALSE)
b.sp <- cor(sNMF_q_mat[,1],q_mat.DNA[,1],method=c("spearman"))
b.pe <- cor(sNMF_q_mat[,1],q_mat.DNA[,1],method=c("pearson"))
text(0.2,0.9,paste0("Spearman's = ",round(b.sp,2)))
text(0.2,0.85,paste0("Pearson's = ",round(b.pe,2)))
text(0.675,0.05,"a) Individual Ancestries",font=2,cex=1.25)
#Compare SuperSOM species coefficients to sNMF admixture
par(mar=c(4,4.5,0.5,2))
plot(sNMF_q_mat[,1],q_mat[,1],pch=21,bg=layer.cols[4],
xlab="sNMF Admixture Estimates",ylab="Trait SuperSOM",xlim=c(0,1),ylim=c(0,1),cex=2)
c.sp <- cor(sNMF_q_mat[,1],q_mat[,1],method=c("spearman"))
c.pe <- cor(sNMF_q_mat[,1],q_mat[,1],method=c("pearson"))
text(0.2,0.9,paste0("Spearman's = ",round(c.sp,2)))
text(0.2,0.84,paste0("Pearson's = ",round(c.pe,2)))
text(0.675,0.05,"b) Species Coefficients",font=2,cex=1.25)
cbind(sNMF_q_mat,q_mat)
#Number of Replicates - can increase if you like
n <- 100
#Number of steps - doesn't usually matter beyond ~100
m <- 100
##############
###Run SOMs###
##############
res <- Trait.SOM()
#Plot Learning#
plotLearning.Traits(res)
#Layer Weights#
plotLayers(res)
#Optimize K#
plotK(res)
#Sample Map#
set.seed(1)
labels <- match.labels(a)#get DAPC labels
q_mat <- match.k(res,labels)#get admixture coefficients
par(mfrow=c(1,1),
mar=c(0,0,0,0))
xy <- xyz[,1:2]
maps::map(database = 'county', xlim = range(xy[,1]) + c(-0.5,0.5), ylim = range(xy[,2]) + c(-0.5,0.5), col="white")
map.axes()
maps::map(database = 'county', xlim = range(xy[,1]) + c(-0.5,0.5), ylim = range(xy[,2]) + c(-0.5,0.5), col="gray",add=T)
maps::map(database = 'state', xlim = range(xy[,1]) + c(-0.5,0.5), ylim = range(xy[,2]) + c(-0.5,0.5), add = T)
make.admix.pie.plot(q_mat,xy,layer.colors = k.cols,radii=2.5,add = T)
legend(-88,38,legend=c(expression(italic("D. cheaha")),
expression(italic("D. monticola"))),cex=2,pt.bg=k.cols[2:1],pch=21)
map.scale(-81.2,31.1)
#Structure Plot#
x <- q_mat[order(q_mat[,1]),]
z <- hclust(dist(x),"single")$order
make.structure.plot(admix.proportions = x[z,],
sample.names = rownames(x[z,]),
mar = c(8,4,2,2),
layer.colors = k.cols,
sort.by = 1)
#Example outputs from one model#
plotModel(res)
#Compare sNMF and DNA SOM admixture estimates
par(mfrow=c(2,1),mar=c(1,4.5,0.5,2),mgp=c(2,0.5,0))
plot(sNMF_q_mat[,1],q_mat.DNA[,1],pch=21,bg=layer.cols[1],xaxt='n',xlab=NA,
ylab="DNA SOM",xlim=c(0,1),ylim=c(0,1),cex=2)
axis(side = 1, at = c(0,0.2,0.4,0.6,0.8,1), labels = FALSE)
b.sp <- cor(sNMF_q_mat[,1],q_mat.DNA[,1],method=c("spearman"))
b.pe <- cor(sNMF_q_mat[,1],q_mat.DNA[,1],method=c("pearson"))
text(0.2,0.9,paste0("Spearman's = ",round(b.sp,2)))
text(0.2,0.85,paste0("Pearson's = ",round(b.pe,2)))
text(0.675,0.05,"a) Individual Ancestries",font=2,cex=1.25)
#Compare SuperSOM species coefficients to sNMF admixture
par(mar=c(4,4.5,0.5,2))
plot(sNMF_q_mat[,1],q_mat[,1],pch=21,bg=layer.cols[4],
xlab="sNMF Admixture Estimates",ylab="Trait SuperSOM",xlim=c(0,1),ylim=c(0,1),cex=2)
c.sp <- cor(sNMF_q_mat[,1],q_mat[,1],method=c("spearman"))
c.pe <- cor(sNMF_q_mat[,1],q_mat[,1],method=c("pearson"))
text(0.2,0.9,paste0("Spearman's = ",round(c.sp,2)))
text(0.2,0.84,paste0("Pearson's = ",round(c.pe,2)))
text(0.675,0.05,"b) Species Coefficients",font=2,cex=1.25)
climate
climate <- climate[,1:2]
cliamte
climate
#Number of Replicates - can increase if you like
n <- 10
#Number of steps - doesn't usually matter beyond ~100
m <- 100
##############
###Run SOMs###
##############
res <- Trait.SOM()
#Plot Learning#
plotLearning.Traits(res)
#Layer Weights#
plotLayers(res)
#Sample Map#
set.seed(1)
labels <- match.labels(a)#get DAPC labels
q_mat <- match.k(res,labels)#get admixture coefficients
par(mfrow=c(1,1),
mar=c(0,0,0,0))
xy <- xyz[,1:2]
maps::map(database = 'county', xlim = range(xy[,1]) + c(-0.5,0.5), ylim = range(xy[,2]) + c(-0.5,0.5), col="white")
map.axes()
maps::map(database = 'county', xlim = range(xy[,1]) + c(-0.5,0.5), ylim = range(xy[,2]) + c(-0.5,0.5), col="gray",add=T)
maps::map(database = 'state', xlim = range(xy[,1]) + c(-0.5,0.5), ylim = range(xy[,2]) + c(-0.5,0.5), add = T)
make.admix.pie.plot(q_mat,xy,layer.colors = k.cols,radii=2.5,add = T)
legend(-88,38,legend=c(expression(italic("D. cheaha")),
expression(italic("D. monticola"))),cex=2,pt.bg=k.cols[2:1],pch=21)
map.scale(-81.2,31.1)
rm(list=ls())
##########################################
source("./R/kohonen_code.R")
set.seed(1)
#################################################
#Data from Pyron et al. 2023, Systematic Biology#
#71 genetic  and 163 morphological specimens    #
#from 71 sites across the range of D. monticola #
#################################################
###MOLECULAR DATA
#Load the *.str file from PEA23
a <- read.structure("./data/seal_in_c90.str",
n.ind = 71,
n.loc = 7809,
onerowperind = FALSE,
col.lab = 1,
col.pop = 0,
col.others = 0,
row.marknames = 0,
NA.char = -9)
#Trim missingness
a = missingno(a, type = "loci", cutoff = 0.20)
a#trimmed to 20% missing data
#Convert allele frequences to matrix
alleles <- makefreq(a)
#Sample data
dat <- read.csv("./data/seal_data.csv",header=T,row.names=1)
xyz <- dat[,2:4]
###SPATIAL, CLIMATIC, AND TRAIT DATA
space <- as.matrix(read.csv("./data/seal_space.csv",header=T,row.names=1))
climate <- as.matrix(read.csv("./data/seal_climate.csv",header=T,row.names=1))
traits <- as.matrix(read.csv("./data/seal_traits.csv",header=T,row.names=1))
##################
###Kohonen maps###
##################
###Parameters for runs
#Size of Grid
g <- round(sqrt(5*sqrt(length(rownames(alleles)))))#common rule of thumb
#Create an output grid of size sqrt(n)
som_grid <- somgrid(xdim = g,
ydim = g,
topo="hexagonal",
neighbourhood.fct = "gaussian")
#Number of Replicates - can increase if you like
n <- 100
#Number of steps - doesn't usually matter beyond ~100
m <- 100
##############
###Run SOMs###
##############
res <- Trait.SOM()
#Plot Learning#
plotLearning.Traits(res)
#Layer Weights#
plotLayers(res)
#Optimize K#
plotK(res)
#Sample Map#
set.seed(1)
labels <- match.labels(a)#get DAPC labels
q_mat <- match.k(res,labels)#get admixture coefficients
par(mfrow=c(1,1),
mar=c(0,0,0,0))
xy <- xyz[,1:2]
maps::map(database = 'county', xlim = range(xy[,1]) + c(-0.5,0.5), ylim = range(xy[,2]) + c(-0.5,0.5), col="white")
map.axes()
maps::map(database = 'county', xlim = range(xy[,1]) + c(-0.5,0.5), ylim = range(xy[,2]) + c(-0.5,0.5), col="gray",add=T)
maps::map(database = 'state', xlim = range(xy[,1]) + c(-0.5,0.5), ylim = range(xy[,2]) + c(-0.5,0.5), add = T)
make.admix.pie.plot(q_mat,xy,layer.colors = k.cols,radii=2.5,add = T)
legend(-88,38,legend=c(expression(italic("D. cheaha")),
expression(italic("D. monticola"))),cex=2,pt.bg=k.cols[2:1],pch=21)
map.scale(-81.2,31.1)
#Structure Plot#
x <- q_mat[order(q_mat[,1]),]
z <- hclust(dist(x),"single")$order
make.structure.plot(admix.proportions = x[z,],
sample.names = rownames(x[z,]),
mar = c(8,4,2,2),
layer.colors = k.cols,
sort.by = 1)
#Example outputs from one model#
plotModel(res)
#################
#Compare to sNMF#
#################
res1 <- DNA.SOM()#Make a DNA SOM for direct comparisons of admixture
q_mat.DNA <- match.k(res1,labels)#get admixture coefficients
sNMF_q_mat <- read.csv("./data/seal_q.mat.csv",row.names=1)#Admixture estimates from sNMF
#Compare sNMF and DNA SOM admixture estimates
par(mfrow=c(2,1),mar=c(1,4.5,0.5,2),mgp=c(2,0.5,0))
plot(sNMF_q_mat[,1],q_mat.DNA[,1],pch=21,bg=layer.cols[1],xaxt='n',xlab=NA,
ylab="DNA SOM",xlim=c(0,1),ylim=c(0,1),cex=2)
axis(side = 1, at = c(0,0.2,0.4,0.6,0.8,1), labels = FALSE)
b.sp <- cor(sNMF_q_mat[,1],q_mat.DNA[,1],method=c("spearman"))
b.pe <- cor(sNMF_q_mat[,1],q_mat.DNA[,1],method=c("pearson"))
text(0.2,0.9,paste0("Spearman's = ",round(b.sp,2)))
text(0.2,0.85,paste0("Pearson's = ",round(b.pe,2)))
text(0.675,0.05,"a) Individual Ancestries",font=2,cex=1.25)
#Compare SuperSOM species coefficients to sNMF admixture
par(mar=c(4,4.5,0.5,2))
plot(sNMF_q_mat[,1],q_mat[,1],pch=21,bg=layer.cols[4],
xlab="sNMF Admixture Estimates",ylab="Trait SuperSOM",xlim=c(0,1),ylim=c(0,1),cex=2)
c.sp <- cor(sNMF_q_mat[,1],q_mat[,1],method=c("spearman"))
c.pe <- cor(sNMF_q_mat[,1],q_mat[,1],method=c("pearson"))
text(0.2,0.9,paste0("Spearman's = ",round(c.sp,2)))
text(0.2,0.84,paste0("Pearson's = ",round(c.pe,2)))
text(0.675,0.05,"b) Species Coefficients",font=2,cex=1.25)
#############
#Save output#
#############
a
labels <- rbind.data.frame(lapply(1:10,function(x){find.clusters(a,n.clust=x,n.pca = dim(a$tab)[1])$grp}))
labels
find.clusters(alleles)
find.clusters(as.matrix(alleles))
a
dim(alleles)
alleles[1:10,1:20]
makefreq()
makefreq
makefreq(a)
x <- makefreq(a)
x
dim(x)
a
a[drop=T]
a[drop=TRUE]
missingno(a, type = "loci", cutoff = 0.20)
x <- makefreq(a[drop=TRUE])
find.clusters(x)
a
find.clusters(a)
kmeans(a,2)
a
kmeans(x,2)
x
alleles
k.means(allels)
k.means(alleles)
kmeans
kmeans(alleles)
kmeans(alleles,2)
x <- alleles
x[which(is.na(x))] <- 0.5
kmeans(x,2)
system.time(kmeans(x,2))
system.time(find.clusters(a,n.clust=2,n.pca=71))
0.329/0.024
system.time(find.clusters(a,n.clust=10,n.pca=71))
system.time(kmeans(x,10))
system.time(k <- kmeans(x,10))
system.time(f <- find.clusters(a,n.clust=10,n.pca=71))
plot(f$grp,k$cluster)
k
k$cluster
f$grp
###############################
#Generate baseline DAPC labels#
#Needed to sync clusters/runs #
###############################
#get labels for different K values
# match.labels <- function(a){
#   labels <- rbind.data.frame(lapply(1:10,function(x){find.clusters(a,n.clust=x,n.pca = dim(a$tab)[1])$grp}))
#   rownames(labels) <- rownames(a$tab);colnames(labels) <- paste("K",1:10,sep='')
#   labels
#   }
match.labels <- function(alleles){
a <- alleles;a[which(is.na(a))] <- 0.5
labels <- rbind.data.frame(lapply(1:10,function(x){kmeans(a,x)}))
rownames(labels) <- rownames(a$tab);colnames(labels) <- paste("K",1:10,sep='')
labels
}
match.labels(alleles)
alleles <- makefreq(a)
a <- alleles;a[which(is.na(a))] <- 0.5
dim(a)
labels <- rbind.data.frame(lapply(1:10,function(x){kmeans(a,x)}))
k
k$cluster
a <- alleles;a[which(is.na(a))] <- 0.5
labels <- rbind.data.frame(lapply(1:10,function(x){kmeans(a,x)$cluster}))
rownames(labels) <- rownames(a$tab);colnames(labels) <- paste("K",1:10,sep='')
labels
a <- alleles;a[which(is.na(a))] <- 0.5
labels <- rbind.data.frame(lapply(1:10,function(x){kmeans(a,x)$cluster}))
labels
rownames(alleles)
###############################
#Generate baseline DAPC labels#
#Needed to sync clusters/runs #
###############################
#get labels for different K values
# match.labels <- function(a){
#   labels <- rbind.data.frame(lapply(1:10,function(x){find.clusters(a,n.clust=x,n.pca = dim(a$tab)[1])$grp}))
#   rownames(labels) <- rownames(a$tab);colnames(labels) <- paste("K",1:10,sep='')
#   labels
#   }
match.labels <- function(alleles){
a <- alleles;a[which(is.na(a))] <- 0.5
labels <- rbind.data.frame(lapply(1:10,function(x){kmeans(a,x)$cluster}))
rownames(labels) <- rownames(alleles);colnames(labels) <- paste("K",1:10,sep='')
labels
}
match.labels(alleles)
#Load libraries and set seed
library(adegenet); library(maps); library(viridis);library(scales)
##########################################
# SOM/UML SPECIES DELIMITATION - kohonen #
##########################################
source("./R/kohonen_code.R")
set.seed(1)
#Load libraries and set seed
library(adegenet); library(maps); library(viridis);library(scales)
library(LEA); library(conStruct);library(poppr); library(kohonen)
library(lsr);library(combinat)
set.seed(1)
#####################################################################
#Here, I test a DNA-only SOM (alleles) under various hyperparameters#
#####################################################################
#Load the *.str file from PEA23
a <- read.structure("../data/seal_in_c90.str",
n.ind = 71,
n.loc = 7809,
onerowperind = FALSE,
col.lab = 1,
col.pop = 0,
col.others = 0,
row.marknames = 0,
NA.char = -9)
##Dimensions
a = missingno(a, type = "loci", cutoff = 0.20)
a#trimmed to 20% missing data
setwd("~/Desktop/delim-SOM/tests")
##########################################
source("./R/kohonen_code.R")
################################
source("../R/kohonen_code.R")
set.seed(1)
#Load libraries and set seed
library(adegenet); library(maps); library(viridis);library(scales)
library(LEA); library(conStruct);library(poppr); library(kohonen)
library(lsr);library(combinat)
set.seed(1)
#####################################################################
#Here, I test a DNA-only SOM (alleles) under various hyperparameters#
#####################################################################
#Load the *.str file from PEA23
a <- read.structure("../data/seal_in_c90.str",
n.ind = 71,
n.loc = 7809,
onerowperind = FALSE,
col.lab = 1,
col.pop = 0,
col.others = 0,
row.marknames = 0,
NA.char = -9)
##Dimensions
a = missingno(a, type = "loci", cutoff = 0.20)
a#trimmed to 20% missing data
#Convert allele frequences to matrix
alleles <- makefreq(a)
#################
#Create an output grid of size sqrt(n)
g <- round(sqrt(5*sqrt(length(rownames(a$tab)))))
som_grid <- somgrid(xdim = g,
ydim = g,
topo="hexagonal",
neighbourhood.fct = "gaussian")
#test rlen and alpha across a range of values
#this is a quick and dirty approach to show
#that the effects are small beyond extremes
#this sampling scheme could be expanded as needed
######################
#m=100,alpha(0.1,0.1)#
######################
m <- 100#number of steps
n <- 100#number of replicates
l_mat0.1_0.1 <- data.frame(row.names = 1:m)#to hold learning values
for (j in 1:n)
{som_model <- som(alleles,grid=som_grid,maxNA.fraction=0.85,alpha=c(0.1,0.1),rlen=m)
l_mat0.1_0.1[,j] <- som_model$changes
print(j)}
######################
#m=100,alpha(0.5,0.1)#
######################
m <- 100#number of steps
n <- 100#number of replicates
l_mat0.5_0.1 <- data.frame(row.names = 1:m)#to hold learning values
for (j in 1:n)
{som_model <- som(alleles,grid=som_grid,maxNA.fraction=0.85,alpha=c(0.5,0.1),rlen=m)
l_mat0.5_0.1[,j] <- som_model$changes
print(j)}
